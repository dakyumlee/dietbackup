package com.mydiet.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class WebTestController {

    @GetMapping("/test-ai")
    @ResponseBody
    public String getTestPage() {
        StringBuilder html = new StringBuilder();
        html.append("<!DOCTYPE html>\n");
        html.append("<html lang=\"ko\">\n");
        html.append("<head>\n");
        html.append("    <meta charset=\"UTF-8\">\n");
        html.append("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
        html.append("    <title>Claude AI 연결 테스트</title>\n");
        html.append("    <style>\n");
        html.append("        body {\n");
        html.append("            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n");
        html.append("            max-width: 800px;\n");
        html.append("            margin: 0 auto;\n");
        html.append("            padding: 20px;\n");
        html.append("            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n");
        html.append("            min-height: 100vh;\n");
        html.append("        }\n");
        html.append("        .container {\n");
        html.append("            background: white;\n");
        html.append("            border-radius: 20px;\n");
        html.append("            padding: 30px;\n");
        html.append("            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n");
        html.append("        }\n");
        html.append("        h1 {\n");
        html.append("            text-align: center;\n");
        html.append("            color: #333;\n");
        html.append("            margin-bottom: 30px;\n");
        html.append("        }\n");
        html.append("        .test-section {\n");
        html.append("            margin-bottom: 30px;\n");
        html.append("            padding: 20px;\n");
        html.append("            border: 2px solid #e9ecef;\n");
        html.append("            border-radius: 15px;\n");
        html.append("            background: #f8f9fa;\n");
        html.append("        }\n");
        html.append("        .test-section h3 {\n");
        html.append("            margin-top: 0;\n");
        html.append("            color: #667eea;\n");
        html.append("        }\n");
        html.append("        button {\n");
        html.append("            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n");
        html.append("            color: white;\n");
        html.append("            border: none;\n");
        html.append("            padding: 12px 24px;\n");
        html.append("            border-radius: 8px;\n");
        html.append("            cursor: pointer;\n");
        html.append("            font-size: 16px;\n");
        html.append("            margin: 5px;\n");
        html.append("            transition: transform 0.2s;\n");
        html.append("        }\n");
        html.append("        button:hover {\n");
        html.append("            transform: translateY(-2px);\n");
        html.append("        }\n");
        html.append("        button:disabled {\n");
        html.append("            opacity: 0.6;\n");
        html.append("            cursor: not-allowed;\n");
        html.append("            transform: none;\n");
        html.append("        }\n");
        html.append("        .input-group {\n");
        html.append("            margin: 15px 0;\n");
        html.append("        }\n");
        html.append("        input[type=\"text\"] {\n");
        html.append("            width: 100%;\n");
        html.append("            padding: 12px;\n");
        html.append("            border: 2px solid #e9ecef;\n");
        html.append("            border-radius: 8px;\n");
        html.append("            font-size: 16px;\n");
        html.append("            margin-top: 5px;\n");
        html.append("            box-sizing: border-box;\n");
        html.append("        }\n");
        html.append("        .result {\n");
        html.append("            margin-top: 15px;\n");
        html.append("            padding: 15px;\n");
        html.append("            border-radius: 8px;\n");
        html.append("            white-space: pre-wrap;\n");
        html.append("            font-family: monospace;\n");
        html.append("            max-height: 300px;\n");
        html.append("            overflow-y: auto;\n");
        html.append("        }\n");
        html.append("        .success {\n");
        html.append("            background: #d4edda;\n");
        html.append("            border: 1px solid #c3e6cb;\n");
        html.append("            color: #155724;\n");
        html.append("        }\n");
        html.append("        .error {\n");
        html.append("            background: #f8d7da;\n");
        html.append("            border: 1px solid #f5c6cb;\n");
        html.append("            color: #721c24;\n");
        html.append("        }\n");
        html.append("        .loading {\n");
        html.append("            background: #fff3cd;\n");
        html.append("            border: 1px solid #ffeaa7;\n");
        html.append("            color: #856404;\n");
        html.append("        }\n");
        html.append("    </style>\n");
        html.append("</head>\n");
        html.append("<body>\n");
        html.append("    <div class=\"container\">\n");
        html.append("        <h1>🤖 Claude AI 연결 테스트</h1>\n");
        html.append("        \n");
        html.append("        <div class=\"test-section\">\n");
        html.append("            <h3>1️⃣ 연결 상태 확인</h3>\n");
        html.append("            <button onclick=\"checkStatus()\">상태 확인</button>\n");
        html.append("            <div id=\"status-result\" class=\"result\" style=\"display: none;\"></div>\n");
        html.append("        </div>\n");
        html.append("        \n");
        html.append("        <div class=\"test-section\">\n");
        html.append("            <h3>2️⃣ Claude AI 테스트</h3>\n");
        html.append("            <div class=\"input-group\">\n");
        html.append("                <label>질문:</label>\n");
        html.append("                <input type=\"text\" id=\"question-input\" value=\"안녕하세요! 자기소개 부탁드립니다.\" />\n");
        html.append("            </div>\n");
        html.append("            <button onclick=\"testClaude()\">Claude에게 질문하기</button>\n");
        html.append("            <div id=\"claude-result\" class=\"result\" style=\"display: none;\"></div>\n");
        html.append("        </div>\n");
        html.append("        \n");
        html.append("        <div class=\"test-section\">\n");
        html.append("            <h3>3️⃣ 기존 /api/ai/ask 테스트</h3>\n");
        html.append("            <div class=\"input-group\">\n");
        html.append("                <label>질문:</label>\n");
        html.append("                <input type=\"text\" id=\"existing-question\" value=\"오늘 기분이 좋아요!\" />\n");
        html.append("            </div>\n");
        html.append("            <button onclick=\"testExistingAPI()\">기존 API 테스트</button>\n");
        html.append("            <div id=\"existing-result\" class=\"result\" style=\"display: none;\"></div>\n");
        html.append("        </div>\n");
        html.append("    </div>\n");
        html.append("\n");
        html.append("    <script>\n");
        html.append("        async function checkStatus() {\n");
        html.append("            const resultDiv = document.getElementById('status-result');\n");
        html.append("            resultDiv.style.display = 'block';\n");
        html.append("            resultDiv.className = 'result loading';\n");
        html.append("            resultDiv.textContent = '연결 상태 확인 중...';\n");
        html.append("            \n");
        html.append("            try {\n");
        html.append("                const response = await fetch('/api/simple-ai/status');\n");
        html.append("                const data = await response.json();\n");
        html.append("                \n");
        html.append("                resultDiv.className = 'result success';\n");
        html.append("                resultDiv.textContent = JSON.stringify(data, null, 2);\n");
        html.append("                \n");
        html.append("            } catch (error) {\n");
        html.append("                resultDiv.className = 'result error';\n");
        html.append("                resultDiv.textContent = '오류: ' + error.message;\n");
        html.append("            }\n");
        html.append("        }\n");
        html.append("        \n");
        html.append("        async function testClaude() {\n");
        html.append("            const question = document.getElementById('question-input').value;\n");
        html.append("            const resultDiv = document.getElementById('claude-result');\n");
        html.append("            \n");
        html.append("            resultDiv.style.display = 'block';\n");
        html.append("            resultDiv.className = 'result loading';\n");
        html.append("            resultDiv.textContent = 'Claude에게 질문하는 중...';\n");
        html.append("            \n");
        html.append("            try {\n");
        html.append("                const response = await fetch('/api/simple-ai/test', {\n");
        html.append("                    method: 'POST',\n");
        html.append("                    headers: {\n");
        html.append("                        'Content-Type': 'application/json',\n");
        html.append("                    },\n");
        html.append("                    body: JSON.stringify({ question: question })\n");
        html.append("                });\n");
        html.append("                \n");
        html.append("                const data = await response.json();\n");
        html.append("                \n");
        html.append("                if (data.success) {\n");
        html.append("                    resultDiv.className = 'result success';\n");
        html.append("                    resultDiv.innerHTML = '<strong>질문:</strong> ' + data.question + '<br><br>' +\n");
        html.append("                                         '<strong>Claude 답변:</strong><br>' + data.answer;\n");
        html.append("                } else {\n");
        html.append("                    resultDiv.className = 'result error';\n");
        html.append("                    resultDiv.textContent = '오류: ' + data.error;\n");
        html.append("                }\n");
        html.append("                \n");
        html.append("            } catch (error) {\n");
        html.append("                resultDiv.className = 'result error';\n");
        html.append("                resultDiv.textContent = '네트워크 오류: ' + error.message;\n");
        html.append("            }\n");
        html.append("        }\n");
        html.append("        \n");
        html.append("        async function testExistingAPI() {\n");
        html.append("            const question = document.getElementById('existing-question').value;\n");
        html.append("            const resultDiv = document.getElementById('existing-result');\n");
        html.append("            \n");
        html.append("            resultDiv.style.display = 'block';\n");
        html.append("            resultDiv.className = 'result loading';\n");
        html.append("            resultDiv.textContent = '기존 API 테스트 중...';\n");
        html.append("            \n");
        html.append("            try {\n");
        html.append("                const response = await fetch('/api/ai/ask', {\n");
        html.append("                    method: 'POST',\n");
        html.append("                    headers: {\n");
        html.append("                        'Content-Type': 'application/json',\n");
        html.append("                    },\n");
        html.append("                    body: JSON.stringify({ \n");
        html.append("                        question: question,\n");
        html.append("                        userId: 1\n");
        html.append("                    })\n");
        html.append("                });\n");
        html.append("                \n");
        html.append("                if (response.ok) {\n");
        html.append("                    const data = await response.json();\n");
        html.append("                    resultDiv.className = 'result success';\n");
        html.append("                    resultDiv.textContent = JSON.stringify(data, null, 2);\n");
        html.append("                } else {\n");
        html.append("                    const errorText = await response.text();\n");
        html.append("                    resultDiv.className = 'result error';\n");
        html.append("                    resultDiv.textContent = 'HTTP ' + response.status + ': ' + errorText;\n");
        html.append("                }\n");
        html.append("                \n");
        html.append("            } catch (error) {\n");
        html.append("                resultDiv.className = 'result error';\n");
        html.append("                resultDiv.textContent = '오류: ' + error.message;\n");
        html.append("            }\n");
        html.append("        }\n");
        html.append("        \n");
        html.append("        window.onload = function() {\n");
        html.append("            checkStatus();\n");
        html.append("        };\n");
        html.append("    </script>\n");
        html.append("</body>\n");
        html.append("</html>");
        
        return html.toString();
    }
    
    @GetMapping("/health")
    @ResponseBody
    public ResponseEntity<String> health() {
        return ResponseEntity.ok("서버가 정상 작동 중입니다! 🚀");
    }
}